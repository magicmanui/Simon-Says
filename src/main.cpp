#include <Arduino.h>
#include <U8g2lib.h>
#include <SPI.h>
#include <Wire.h>
#include <Tone32.h>
#include <list>
#include <stdlib.h>
#include <time.h>
#include <string>
#include <sstream>
#include <WiFi.h>
using namespace std;

#define READY_TO_GAME 0

#define PIN_BUTTON_1 15
#define PIN_BUTTON_2 12
#define PIN_BUTTON_3 35
#define PIN_BUTTON_4 22

#define PIN_LED_1 2
#define PIN_LED_2 14
#define PIN_LED_3 25
#define PIN_LED_4 23

#define PIN_BUZZER 13

// Display connections.
#define SW_CLK 5
#define SW_SDA 18  

int loseCount = 3;
IPAddress ip(192, 168, 1, 40);
IPAddress dns(192, 168, 1, 1);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);
IPAddress ipToConnect(192, 168, 4, 1);
WiFiServer server(80);
String header;
String output26State = "off";
String output27State = "off";
const int output26 = 26;
const int output27 = 27;

vector<int> buttonsToSend = {};
bool isFinished = true;
bool clientIsFinished = true;
int clientScore = 0;
int currentButton = -1;
int currentComplexity = 3;
int currentSpeed = 0.;
int sleepTime;
list<int> buttonOrder = {};
list<int> buttonOrder2 = {};
int gameState;
short win = -1;
short clientWin = -1;

const char *ssid = "ESP32-Access-Point";
const char *password = "123456789";

struct ButtonLed
{
  const int button;
  const int led;
  const int note;
  unsigned long buttonPressedUntil;
};

int currentNote;
int selectedGame = 1;

// TODO: Change the notes of the buttons. The current notes don't sound good.
ButtonLed buttonLedList[] = {{PIN_BUTTON_1, PIN_LED_1, NOTE_D5}, {PIN_BUTTON_2, PIN_LED_2, NOTE_F5}, {PIN_BUTTON_3, PIN_LED_3, NOTE_F4}, {PIN_BUTTON_4, PIN_LED_4, NOTE_E4}};

U8G2_SSD1306_128X32_UNIVISION_F_SW_I2C u8g2(U8G2_R0, /* clock=*/SW_CLK, /* data=*/SW_SDA);

WiFiClient client;

void showPattern(){
  currentSpeed = 100 * currentComplexity / 10;
  for (list<int>::iterator i = buttonOrder.begin(); i != buttonOrder.end(); i++)
  {
    //turn on the LED
    digitalWrite(buttonLedList[*i].led, HIGH);
    //turn on current Button Sound
    tone(PIN_BUZZER, buttonLedList[*i].note, 0, 1);
    //sleep for 300 milliseconds - currentSpeed
    sleepTime = millis() + 600 - currentSpeed;
    while (millis() < sleepTime);
    //turn off the LED and sound
    noTone(PIN_BUZZER, 1);
    digitalWrite(buttonLedList[*i].led, LOW);
    if (*i == *++i)
    {
      int x = millis() + 50;
      while (x > millis());
    }
    --i;
  }
}

void basicSimonSaysClient(){
  // show memorize on screen
  u8g2.firstPage();
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(8, 16, "Memorize!");
  } while (u8g2.nextPage());

  //pattern is already generated by the server

  //show repeat! on screen
  u8g2.firstPage();
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(8, 16, "Repeat!");
  } while (u8g2.nextPage());

  // do until list is empty
  while (buttonOrder.size())
  {
    int i = 0;
    while (true)
    {
      delay(10);
      if (client.available())
      {
        char c = client.read();
        Serial.write(c);
        header += c;
        if (header.charAt(0) == 2)
        {
          clientIsFinished = true;
          ++clientScore;
          header.clear();
        }else if(header.charAt(0) == 3){
          clientWin = 0;
          header.clear();
        }
      }
      i = (i + 1) % 4; // count from 0 to 3 repeat
      // check buttons
      if (digitalRead(buttonLedList[i].button) == LOW)
      {
        //set current button
        currentButton = i;
        //enable led
        digitalWrite(buttonLedList[i].led, HIGH);
        //set note
        if (currentNote != buttonLedList[i].note)
        {
          noTone(PIN_BUZZER, 1);
          tone(PIN_BUZZER, buttonLedList[i].note, 0, 1);
          currentNote = buttonLedList[i].note;
        }
        //set latest disable point for button led and sound
        buttonLedList[i].buttonPressedUntil = millis() + 300;
        //wait until button is released
        while (digitalRead(buttonLedList[i].button) == LOW)
          ;
        //go to line 220
        break;
      }
      else if (buttonLedList[i].buttonPressedUntil != 0 && buttonLedList[i].buttonPressedUntil < millis())
      {
        //if button has run out of time turn off everything
        buttonLedList[i].buttonPressedUntil = 0;
        if (buttonLedList[i].note == currentNote)
        {
          noTone(PIN_BUZZER, 1);
          currentNote = 0;
        }
        digitalWrite(buttonLedList[i].led, LOW);
      }
    }
    // check whether the right button was pressed
    if (buttonOrder.front() == currentButton)
    {
      currentButton = -1;
      // remove first element of list
      buttonOrder.pop_front();
      //wait while any button is pressed
      while ((digitalRead(buttonLedList[0].button) == LOW) || (digitalRead(buttonLedList[1].button) == LOW) || (digitalRead(buttonLedList[2].button)) == LOW || (digitalRead(buttonLedList[3].button) == LOW))
        ;
    }
    else if (currentButton == -1)
      ; // catch if no button is pressed

    //Lose sound 440, 415.3, 392 chromatic scale unfortunately only integers
    else
    {
      // turn everything off
      for (int i = 0; i < 4; i++)
      {
        digitalWrite(buttonLedList[i].led, LOW);
      }
      u8g2.firstPage();
      do
      {
        // write you lose on screen
        u8g2.setFont(u8g2_font_ncenB14_tr);
        u8g2.drawStr(8, 16, "you lose!");
      } while (u8g2.nextPage());
      noTone(PIN_BUZZER, 1);
      delay(100);
      //play scale
      tone(PIN_BUZZER, 440, 500, 1);
      tone(PIN_BUZZER, 415, 500, 1);
      tone(PIN_BUZZER, 392, 500, 1);
      noTone(PIN_BUZZER, 1);
      client.print((char)3);
      client.print((char)2);
      win = 0;
      while (1)
      { // while true
        // write wait for other player
        isFinished = true;
        
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          u8g2.drawStr(4, 13, "wait for ");
          u8g2.drawStr(8, 32, "other player");
        } while (u8g2.nextPage());

        if (client.available() || clientIsFinished)
        {
          char c = client.read();
          Serial.write((int)c);
          header += c;
          if (header.charAt(0) == 2 || clientIsFinished)
          {
            clientIsFinished = true;
            ++clientScore;
            header.clear();
            return;
          }else if(header.charAt(0) == 3){
            clientWin = 0;
            header.clear();
          }
        }
      }
    }
  }
  int x = millis() + 300;
  while (x > millis());
  for (int i = 0; i < 4; i++)
  {
    digitalWrite(buttonLedList[i].led, LOW);
  }
  u8g2.firstPage();
  isFinished = true;
  client.print((char)2);
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(4, 13, "wait for ");
    u8g2.drawStr(8, 32, "other player");
  } while (u8g2.nextPage());
  noTone(PIN_BUZZER, 1);
  ++currentComplexity;
  while(1){
    if (client.available() || clientIsFinished){
      char c = client.read();
      //Serial.write(c);
      header += c;
      Serial.println(header);
      if (header.charAt(0) == 2 || clientIsFinished)
      {
        clientIsFinished = true;
        Serial.println("test bini da ja odr?");
        ++clientScore;
        header.clear();
        return;
      }else if(header.charAt(0) == 3){
        clientWin = 0;
        header.clear();
      }
    }
  }
  delay(100);
}

void unpackButtons(char c){
  Serial.println((int)c);
  switch (c >> 6)
  {
  case 1:
    buttonOrder.push_back((int)(c & 0b00110000)>>4);
    break;
  case 2:
    buttonOrder.push_back((int)(c & 0b00110000)>>4);
    buttonOrder.push_back((int)(c & 0b00001100)>>2);
    break;
  case 3:
    buttonOrder.push_back((int)(c & 0b00110000)>>4);
    buttonOrder.push_back((int)(c & 0b00001100)>>2);
    buttonOrder.push_back((int)(c & 0b00000011));
    break;
  }
}
char c;
void clientLoop(){
  if (client.available()){
    char c = client.read();
    Serial.write((int)c);
    header += c;
    if (header.charAt(0) == 3)
    {
      clientWin = 0;
      header.clear();
    }
  }
  if(win && !clientWin){
    while(1){
      u8g2.firstPage();
      do
      {
        // write you lose on screen
        u8g2.setFont(u8g2_font_ncenB14_tr);
        u8g2.drawStr(8, 16, "you win!");
      } while (u8g2.nextPage());
       Serial.println("ich habe gewonnen");
    }
  }else if(!win && clientWin){
    while(1){
      u8g2.firstPage();
      do
      {
        // write you lose on screen
        u8g2.setFont(u8g2_font_ncenB14_tr);
        u8g2.drawStr(8, 16, "you lose!");
      } while (u8g2.nextPage());
      Serial.println("ich habe verloren");
    }
  }else if(!win && !clientWin){
    if(loseCount){
      --loseCount;
    }
    else{
      while(1){
        u8g2.firstPage();
        do
        {
          // write you lose on screen
          u8g2.setFont(u8g2_font_ncenB14_tr);
          u8g2.drawStr(8, 16, "Tie!");
        } while (u8g2.nextPage());
      }
    }
  }else{
    loseCount = 3;
  }
  win = 1;
  clientWin = 1;
  while(!client.available()); // client is Server
  if(client.available()){
    while(c != 10){
      Serial.println("jkllas");
      char c = client.read();
      Serial.println((int)c);
      header += c;
      if(c == 10){
            Serial.println("asdfjkads");

        if(header.charAt(0) == 1){
          for(int i = 1; i < header.length(); i++){
            if(header[i]!=255 && header[i]<4){
              buttonOrder.push_back((int)header[i]);
              Serial.print(buttonOrder.back());
              Serial.print('\t');
              Serial.println((int)header[i]);
            }
          }
        }
        Serial.println("header");
        header.clear();
        break;
      }
    }
  }
  Serial.println("ich muss rauus");
  for(list<int>::iterator i = buttonOrder.begin(); i != buttonOrder.end(); i++){
    Serial.print(*i);
  }
  Serial.println();
  showPattern();
  Serial.println(buttonOrder.size());
  Serial.println("ich muss rauus");
  isFinished = false;
  clientIsFinished = false;
  basicSimonSaysClient();
  buttonOrder.clear();
}

bool bla = false;
void configureAsListener()
{
  //client:
  /*if(header.charAt(0) == 1){
            for(int i = 1; i < header.length(); i++){
              c = header.charAt(i);
              for(int j = 0; j < header.charAt(i)>>6; j++){
                buttonsRecieved.push_back((int)(c & 0b00110000)>>4);
                c<<2;
              }
            }
          }*/
  Serial.begin(9600);
  Serial.println("Attempting to connect to WPA network...");
  Serial.print("SSID: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  Serial.println("Connecting");
  while(WiFi.status() != WL_CONNECTED) { 
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to WiFi network with IP Address: ");
  Serial.println(WiFi.localIP());
  if(client.connect(ipToConnect, 80)){
    return;
  }
}

void basicSimonSaysServer(WiFiClient client)
{
  // show memorize on screen
  u8g2.firstPage();
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(8, 16, "Memorize!");
  } while (u8g2.nextPage());

  
  //pattern is already generated by the server

  //show repeat! on screen
  u8g2.firstPage();
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(8, 16, "Repeat!");
  } while (u8g2.nextPage());
  Serial.println(123);
  // do until list is empty
  while (buttonOrder.size())
  {
    int i = 0;
    while (true)
    {
      delay(10);
      if (client.available())
      {
        Serial.println(13);
        char c = client.read();
        Serial.println(14);
        Serial.write(c);
        header += c;
        Serial.println(15);
        if (header.charAt(0) == 2)
        {
          clientIsFinished = true;
          Serial.println("test bini da ja odr?");
          ++clientScore;
          header.clear();
        }else if(header.charAt(0) == 3){
          clientWin = 0;
          Serial.println("oh das opfer het verlore");
          header.clear();
        }
      }
      i = (i + 1) % 4; // count from 0 to 3 repeat
      // check buttons
      if (digitalRead(buttonLedList[i].button) == LOW)
      {
        //set current button
        currentButton = i;
        //enable led
        digitalWrite(buttonLedList[i].led, HIGH);
        //set note
        if (currentNote != buttonLedList[i].note)
        {
          noTone(PIN_BUZZER, 1);
          tone(PIN_BUZZER, buttonLedList[i].note, 0, 1);
          currentNote = buttonLedList[i].note;
        }
        //set latest disable point for button led and sound
        buttonLedList[i].buttonPressedUntil = millis() + 300;
        //wait until button is released
        while (digitalRead(buttonLedList[i].button) == LOW)
          ;
        //go to line 220
        break;
      }
      else if (buttonLedList[i].buttonPressedUntil != 0 && buttonLedList[i].buttonPressedUntil < millis())
      {
        //if button has run out of time turn off everything
        buttonLedList[i].buttonPressedUntil = 0;
        if (buttonLedList[i].note == currentNote)
        {
          noTone(PIN_BUZZER, 1);
          currentNote = 0;
        }
        digitalWrite(buttonLedList[i].led, LOW);
      }
    }
    // check whether the right button was pressed
    if (buttonOrder.front() == currentButton)
    {
      currentButton = -1;
      // remove first element of list
      buttonOrder.pop_front();
      //wait while any button is pressed
      while ((digitalRead(buttonLedList[0].button) == LOW) || (digitalRead(buttonLedList[1].button) == LOW) || (digitalRead(buttonLedList[2].button)) == LOW || (digitalRead(buttonLedList[3].button) == LOW))
        ;
    }
    else if (currentButton == -1); // catch if no button is pressed

    //Lose sound 440, 415.3, 392 chromatic scale unfortunately only integers
    else
    {
      // turn everything off
      for (int i = 0; i < 4; i++)
      {
        digitalWrite(buttonLedList[i].led, LOW);
      }
      u8g2.firstPage();
      do
      {
        // write you lose on screen
        u8g2.setFont(u8g2_font_ncenB14_tr);
        u8g2.drawStr(8, 16, "you lose!");
      } while (u8g2.nextPage());
      noTone(PIN_BUZZER, 1);
      delay(100);
      //play scale
      tone(PIN_BUZZER, 440, 500, 1);
      tone(PIN_BUZZER, 415, 500, 1);
      tone(PIN_BUZZER, 392, 500, 1);
      noTone(PIN_BUZZER, 1);
      client.print((char)3);
      client.print((char)2);
      win = 0;
      while (1)
      { // while true
        // write wait for other player
        isFinished = true;
        
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          u8g2.drawStr(4, 13, "wait for ");
          u8g2.drawStr(8, 32, "other player");
        } while (u8g2.nextPage());

        if (client.available() || clientIsFinished)
        {
          char c = client.read();
          Serial.write((int)c);
          header += c;
          if (header.charAt(0) == 2 || clientIsFinished)
          {
            clientIsFinished = true;
            ++clientScore;
            header.clear();
            return;
          } else if(header.charAt(0) == 3){
            clientWin = 0;
            header.clear();
          }
        }
      }
    }
  }

  int x = millis() + 300;
  while (x > millis());
  for (int i = 0; i < 4; i++)
  {
    digitalWrite(buttonLedList[i].led, LOW);
  }
  u8g2.firstPage();
  isFinished = true;
  client.print((char)2);
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(4, 13, "wait for ");
    u8g2.drawStr(8, 32, "other player");
  } while (u8g2.nextPage());
  noTone(PIN_BUZZER, 1);
  
  while(1){
    if (client.available() || clientIsFinished){
      char c = client.read();
      //Serial.write(c);
      header += c;
      Serial.println(header);
      if (header.charAt(0) == 2 || clientIsFinished)
      {
        clientIsFinished = true;
        Serial.println("test bini da ja odr?");
        ++clientScore;
        header.clear();
        return;
      }else if(header.charAt(0) == 3){
        clientWin = 0;
        header.clear();
      }
    }
  }
  delay(100);
}

void serverSetup()
{
  Serial.begin(9600);
  WiFi.mode(WIFI_STA);
  //WiFi.config(ip, gateway, subnet, dns);
  pinMode(output26, OUTPUT);
  pinMode(output27, OUTPUT);
  digitalWrite(output26, LOW);
  digitalWrite(output27, LOW);
  Serial.print("Setting AP (Access Point)…");
  WiFi.softAP(ssid, password);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  server.begin();
}

void generatePatternServer()
{
  //set random seed
  srand(time(0));
  //generate new numbers
  for (int i = 0; i < currentComplexity; i++)
  {
    //push the next random button
    buttonsToSend.push_back(rand() % 4);
  }
}

void serverLoop()
{
  WiFiClient client = server.available();
  if (client)
  {
    Serial.println("New Client.");
    clientScore = 0;
    String currentLine = "";
    while (client.connected())
    {
      if (client.available())
      {
        char c = client.read();
        Serial.write((int)c);
        header += c;
        if (header.charAt(0) == 3)
        {
          clientWin = false;
          header.clear();
        }
      }
      Serial.println(clientWin +20000);
      Serial.println(win +20000);
      if(win && !clientWin){
        while(1){
          Serial.println("ich habe gewonnen");
          u8g2.firstPage();
          do
          {
            // write you lose on screen
            u8g2.setFont(u8g2_font_ncenB14_tr);
            u8g2.drawStr(8, 16, "you win!");
          } while (u8g2.nextPage());
            }
      }else if(!win && clientWin){
        while(1){
          u8g2.firstPage();
          do
          {
            // write you lose on screen
            u8g2.setFont(u8g2_font_ncenB14_tr);
            u8g2.drawStr(8, 16, "you lose!");
          } while (u8g2.nextPage());
              Serial.println("ich habe verloren");
            }
      }else if(!win && !clientWin){
        if(loseCount){
          --loseCount;
        }
        else{
          while(1){
            u8g2.firstPage();
            do
            {
              // write you lose on screen
              u8g2.setFont(u8g2_font_ncenB14_tr);
              u8g2.drawStr(8, 16, "Tie!");
            } while (u8g2.nextPage());
          }
        }
      }else{
        loseCount = 3;
        ++currentComplexity;
      }
      win = 1;
      clientWin = 1;
      if (buttonsToSend.size() == 0 && isFinished && clientIsFinished)
      {
        generatePatternServer();
        Serial.println(1);
        buttonOrder.clear();
        client.print((char)1);
        Serial.println(2);
        for(int i = 0; i < buttonsToSend.size(); i++){
          client.print((char)buttonsToSend[i]);
          Serial.println(i+3);
          buttonOrder.push_back(buttonsToSend[i]);
        }
        client.println();
        Serial.println(10);
        buttonsToSend.clear();
        showPattern();
        Serial.println(11);
        isFinished = false;
        clientIsFinished = false;
        basicSimonSaysServer(client);
        buttonOrder.clear();
      }

      if (!isFinished)
      {
        //simon says returns 1 if succeded, 0 if not

        isFinished = 1; //basicsimonsays
      }

      if (client.available())
      {
        char c = client.read();
        Serial.write(c);
        header += c;
        if (c == 0)
        {
          if (header.charAt(0) == 2)
          {
            clientIsFinished = true;
            ++clientScore;
            header.clear();
          }else if(header.charAt(0) == 3){
            clientWin = 0;
            header.clear();
          }
        }
      }
    }
  }
}

void setup()
{
  // Init buttons and leds
  for (int i = 0; i < 4; i++)
  {
    pinMode(buttonLedList[i].button, INPUT_PULLUP);
    pinMode(buttonLedList[i].led, OUTPUT);
  }

  // Init buzzer
  pinMode(PIN_BUZZER, OUTPUT);

  // Init display
  u8g2.begin();

  // main Menu
  while (true)
  { //!((digitalRead(buttonLedList[0].button) == LOW) || (digitalRead(buttonLedList[1].button) == LOW) || (digitalRead(buttonLedList[2].button)) == LOW || (digitalRead(buttonLedList[3].button) == LOW))){
    u8g2.firstPage();
    do
    {
      // Put what you want to draw inside this loop.
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.drawStr(4, 16, "Select Game");
      u8g2.drawStr(4, 32, "blue: simple");
    } while (u8g2.nextPage());
    int x = millis() + 1500;
    while (x > millis())
    { // wait 1500 ms
      if (digitalRead(buttonLedList[0].button) == LOW)
      {                   // while waiting checking for blue/red button to be pressed
        selectedGame = 0; // select game mode simple
        return;           //exit setup start loop function
      }
      else if (digitalRead(buttonLedList[2].button) == LOW)
      {
        selectedGame = 1; // select game mode ongoing
        return;
      }
      else if (digitalRead(buttonLedList[3].button) == LOW)
      {
        serverSetup();
        selectedGame = 2;
        return;
      }
      else if (digitalRead(buttonLedList[1].button) == LOW)
      {
        configureAsListener();
        selectedGame = 3;
        return;
      }
    }
    u8g2.firstPage();
    do
    {
      // Put what you want to draw inside this loop.
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.drawStr(4, 16, "Select Game"); // switch between menu screens using timer and repaint the screen
      u8g2.drawStr(4, 32, "red: ongoing");
    } while (u8g2.nextPage());
    x = millis() + 1500;
    while (x > millis())
    {
      if (digitalRead(buttonLedList[0].button) == LOW)
      {
        selectedGame = 0;
        return;
      }
      else if (digitalRead(buttonLedList[2].button) == LOW)
      {
        selectedGame = 1;
        return;
      }
      else if (digitalRead(buttonLedList[3].button) == LOW)
      {
        serverSetup();
        selectedGame = 2;
        return;
      }
      else if (digitalRead(buttonLedList[1].button) == LOW)
      {
        configureAsListener();
        selectedGame = 3;
        return;
      }
    }
  }
}

// generates a new element for a ongoing pattern and shows the hole pattern
void generateOngoingPattern()
{
  //copy back uped list into the main list
  buttonOrder = buttonOrder2;
  //set seed based on time
  srand(time(0));
  //change speed based on current complexity
  currentSpeed = 100 * currentComplexity / 10;
  //generate new number
  buttonOrder.push_back(rand() % 4);
  //play all the buttons
  for (list<int>::iterator i = buttonOrder.begin(); i != buttonOrder.end(); i++)
  {
    // wait if the same button twice in a row
    if (buttonOrder.size() > 1 && buttonOrder.back() == *--buttonOrder.end())
    {
      delay(50);
    }
    //activate led and play note
    digitalWrite(buttonLedList[*i].led, HIGH);
    tone(PIN_BUZZER, buttonLedList[*i].note, 0, 1);
    sleepTime = millis() + 600 - currentSpeed;
    while (millis() < sleepTime)
      ; //wait 600 ms - currentSpeed
    //deactivate led and sound
    digitalWrite(buttonLedList[*i].led, LOW);
    noTone(PIN_BUZZER, 1);
  }
}

// generates a random pattern with length currentComplexity
void generatePattern()
{
  //set speed
  currentSpeed = 100 * currentComplexity / 10;
  //clear the list
  buttonOrder.clear();
  //set random seed
  srand(time(0));
  //generate new numbers
  for (int i = 0; i < currentComplexity; i++)
  {
    //push the next random button
    buttonOrder.push_back(rand() % 4);
    //wait if previous button is the same
    if (buttonOrder.size() > 1 && buttonOrder.back() == *----buttonOrder.end())
    {
      int x = millis() + 50;
      while (x > millis())
        ;
    }
    //turn on the LED
    digitalWrite(buttonLedList[buttonOrder.back()].led, HIGH);
    //turn on current Button Sound
    tone(PIN_BUZZER, buttonLedList[buttonOrder.back()].note, 0, 1);
    //sleep for 300 milliseconds - currentSpeed
    sleepTime = millis() + 600 - currentSpeed;
    while (millis() < sleepTime)
      ;
    //turn off the LED and sound
    noTone(PIN_BUZZER, 1);
    digitalWrite(buttonLedList[buttonOrder.back()].led, LOW);
  }
  // set game state
  gameState = READY_TO_GAME;
}
// the simple version of simon says (blue)
void basicSimonSays()
{
  // show memorize on screen
  u8g2.firstPage();
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(8, 16, "Memorize!");
  } while (u8g2.nextPage());
  //generate a Pattern
  generatePattern();
  //show repeat on screen
  u8g2.firstPage();
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(8, 16, "Repeat!");
  } while (u8g2.nextPage());
  // do until list is empty
  while (buttonOrder.size())
  {
    int i = 0;
    while (true)
    {
      delay(10);
      //while((digitalRead(buttonLedList[0].button) == LOW) || (digitalRead(buttonLedList[1].button) == LOW) || (digitalRead(buttonLedList[2].button)) == LOW || (digitalRead(buttonLedList[3].button) == LOW));
      i = (i + 1) % 4; // count from 0 to 3 repeat
      // check buttons
      if (digitalRead(buttonLedList[i].button) == LOW)
      {
        //set current button
        currentButton = i;
        //enable led
        digitalWrite(buttonLedList[i].led, HIGH);
        //set note
        if (currentNote != buttonLedList[i].note)
        {
          noTone(PIN_BUZZER, 1);
          tone(PIN_BUZZER, buttonLedList[i].note, 0, 1);
          currentNote = buttonLedList[i].note;
        }
        //set latest disable point for button led and sound
        buttonLedList[i].buttonPressedUntil = millis() + 300;
        //wait until button is released
        while (digitalRead(buttonLedList[i].button) == LOW)
          ;
        //go to line 220
        break;
      }
      else if (buttonLedList[i].buttonPressedUntil != 0 && buttonLedList[i].buttonPressedUntil < millis())
      {
        //if button has run out of time turn off everything
        buttonLedList[i].buttonPressedUntil = 0;
        if (buttonLedList[i].note == currentNote)
        {
          noTone(PIN_BUZZER, 1);
          currentNote = 0;
        }
        digitalWrite(buttonLedList[i].led, LOW);
      }
    }
    // check whether the right button was pressed
    if (buttonOrder.front() == currentButton)
    {
      currentButton = -1;
      // remove first element of list
      buttonOrder.pop_front();
      //wait while any button is pressed
      while ((digitalRead(buttonLedList[0].button) == LOW) || (digitalRead(buttonLedList[1].button) == LOW) || (digitalRead(buttonLedList[2].button)) == LOW || (digitalRead(buttonLedList[3].button) == LOW))
        ;
    }
    else if (currentButton == -1)
      ; // catch if no button is pressed

    //Lose sound 440, 415.3, 392 chromatic scale unfortunately only integers
    else
    {
      // turn everything off
      for (int i = 0; i < 4; i++)
      {
        digitalWrite(buttonLedList[i].led, LOW);
      }
      u8g2.firstPage();
      do
      {
        // write you lose on screen
        u8g2.setFont(u8g2_font_ncenB14_tr);
        u8g2.drawStr(8, 16, "you lose!");
      } while (u8g2.nextPage());
      noTone(PIN_BUZZER, 1);
      delay(100);
      //play scale
      tone(PIN_BUZZER, 440, 500, 1);
      tone(PIN_BUZZER, 415, 500, 1);
      tone(PIN_BUZZER, 392, 500, 1);
      noTone(PIN_BUZZER, 1);
      while (1)
      { // while true
        // write press yellow and red
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          u8g2.drawStr(4, 13, "press yellow");
          u8g2.drawStr(8, 32, "   and red");
        } while (u8g2.nextPage());

        int x = millis() + 1000; // wait a second
        while (x > millis())
        { // while waiting check if red and yellow are pressed
          if ((digitalRead(buttonLedList[1].button) == LOW) && digitalRead(buttonLedList[2].button) == LOW)
          {
            //reset all values
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            delay(100);
            //clear display
            u8g2.firstPage();
            do
            {
              // Put what you want to draw inside this loop.
              u8g2.setFont(u8g2_font_ncenB14_tr);
              u8g2.drawStr(4, 13, "");
            } while (u8g2.nextPage());
            //restart loop function
            return;
            // while waiting cheick if blue and green are pressed
          }
          else if ((digitalRead(buttonLedList[0].button) == LOW) && digitalRead(buttonLedList[3].button) == LOW)
          {
            //reset values
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            //select menu
            selectedGame = 4;
            //restart loop function
            return;
          }
        }
        //same as above with the appropriate screens
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          stringstream ss;
          ss << buttonOrder.front() << currentButton;
          string s = ss.str();
          u8g2.drawStr(4, 13, "to restart");
          u8g2.drawStr(8, 32, "the game");
        } while (u8g2.nextPage());

        x = millis() + 1000;
        while (x > millis())
        {
          if ((digitalRead(buttonLedList[1].button) == LOW) && digitalRead(buttonLedList[2].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            delay(100);
            u8g2.firstPage();
            do
            {
              // Put what you want to draw inside this loop.
              u8g2.setFont(u8g2_font_ncenB14_tr);
              stringstream ss;
              ss << buttonOrder.front() << currentButton;
              string s = ss.str();
              u8g2.drawStr(4, 13, "");
            } while (u8g2.nextPage());
            return;
          }
          else if ((digitalRead(buttonLedList[0].button) == LOW) && digitalRead(buttonLedList[3].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            selectedGame = 4;
            return;
          }
        }
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          stringstream ss;
          ss << buttonOrder.front() << currentButton;
          string s = ss.str();
          u8g2.drawStr(4, 13, "press blue");
          u8g2.drawStr(8, 32, "  and green");
        } while (u8g2.nextPage());

        x = millis() + 1000;
        while (x > millis())
        {
          if ((digitalRead(buttonLedList[1].button) == LOW) && digitalRead(buttonLedList[2].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            delay(100);
            u8g2.firstPage();
            do
            {
              // Put what you want to draw inside this loop.
              u8g2.setFont(u8g2_font_ncenB14_tr);
              stringstream ss;
              ss << buttonOrder.front() << currentButton;
              string s = ss.str();
              u8g2.drawStr(4, 13, "");
            } while (u8g2.nextPage());
            return;
          }
          else if ((digitalRead(buttonLedList[0].button) == LOW) && digitalRead(buttonLedList[3].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            selectedGame = 4;
            return;
          }
        }
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          stringstream ss;
          ss << buttonOrder.front() << currentButton;
          string s = ss.str();
          u8g2.drawStr(4, 13, "to return");
          u8g2.drawStr(8, 32, "to the menu");
        } while (u8g2.nextPage());

        x = millis() + 1000;
        while (x > millis())
        {
          if ((digitalRead(buttonLedList[1].button) == LOW) && digitalRead(buttonLedList[2].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            delay(100);
            u8g2.firstPage();
            do
            {
              // Put what you want to draw inside this loop.
              u8g2.setFont(u8g2_font_ncenB14_tr);
              stringstream ss;
              ss << buttonOrder.front() << currentButton;
              string s = ss.str();
              u8g2.drawStr(4, 13, "");
            } while (u8g2.nextPage());
            return;
          }
          else if ((digitalRead(buttonLedList[0].button) == LOW) && digitalRead(buttonLedList[3].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            selectedGame = 4;
            return;
          }
        }
      }
    }
  }
  int x = millis() + 300;
  while (x > millis())
    ;
  for (int i = 0; i < 4; i++)
  {
    digitalWrite(buttonLedList[i].led, LOW);
  }
  noTone(PIN_BUZZER, 1);
  ++currentComplexity;
  delay(100);
}

void ongoingSimonSays()
{
  u8g2.firstPage();
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(8, 16, "Memorize!");
  } while (u8g2.nextPage());
  if (buttonOrder2.size() == 0)
  {
    generatePattern();
  }
  else
    generateOngoingPattern();
  buttonOrder2 = buttonOrder;
  u8g2.firstPage();
  do
  {
    // Put what you want to draw inside this loop.
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(8, 16, "Repeat!");
  } while (u8g2.nextPage());

  while (buttonOrder.size())
  {
    int i = 0;
    while (true)
    {
      delay(10);
      //while((digitalRead(buttonLedList[0].button) == LOW) || (digitalRead(buttonLedList[1].button) == LOW) || (digitalRead(buttonLedList[2].button)) == LOW || (digitalRead(buttonLedList[3].button) == LOW));
      i = (i + 1) % 4;
      if (digitalRead(buttonLedList[i].button) == LOW)
      {
        currentButton = i;
        digitalWrite(buttonLedList[i].led, HIGH);
        if (currentNote != buttonLedList[i].note)
        {
          noTone(PIN_BUZZER, 1);
          tone(PIN_BUZZER, buttonLedList[i].note, 0, 1);
          currentNote = buttonLedList[i].note;
        }
        buttonLedList[i].buttonPressedUntil = millis() + 300;
        while (digitalRead(buttonLedList[i].button) == LOW)
          ;
        break;
      }
      else if (buttonLedList[i].buttonPressedUntil != 0 && buttonLedList[i].buttonPressedUntil < millis())
      {
        buttonLedList[i].buttonPressedUntil = 0;
        if (buttonLedList[i].note == currentNote)
        {
          noTone(PIN_BUZZER, 1);
          currentNote = 0;
        }
        digitalWrite(buttonLedList[i].led, LOW);
      }
    }
    if (buttonOrder.front() == currentButton)
    {
      currentButton = -1;
      buttonOrder.pop_front();
      while ((digitalRead(buttonLedList[0].button) == LOW) || (digitalRead(buttonLedList[1].button) == LOW) || (digitalRead(buttonLedList[2].button)) == LOW || (digitalRead(buttonLedList[3].button) == LOW))
        ;
    }
    else if (currentButton == -1)
      ;

    //Lose sound 440, 415.3, 392
    else
    {
      for (int i = 0; i < 4; i++)
      {
        digitalWrite(buttonLedList[i].led, LOW);
      }
      u8g2.firstPage();
      do
      {
        // Put what you want to draw inside this loop.
        u8g2.setFont(u8g2_font_ncenB14_tr);
        u8g2.drawStr(8, 16, "you lose!");
      } while (u8g2.nextPage());
      noTone(PIN_BUZZER, 1);
      delay(100);
      tone(PIN_BUZZER, 440, 500, 1);
      tone(PIN_BUZZER, 415, 500, 1);
      tone(PIN_BUZZER, 392, 500, 1);
      noTone(PIN_BUZZER, 1);
      while (1)
      {
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          stringstream ss;
          ss << buttonOrder.front() << currentButton;
          string s = ss.str();
          u8g2.drawStr(4, 13, "press yellow");
          u8g2.drawStr(8, 32, "   and red");
        } while (u8g2.nextPage());

        int x = millis() + 1000;
        while (x > millis())
        {
          if ((digitalRead(buttonLedList[1].button) == LOW) && digitalRead(buttonLedList[2].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            delay(100);
            u8g2.firstPage();
            do
            {
              // Put what you want to draw inside this loop.
              u8g2.setFont(u8g2_font_ncenB14_tr);
              stringstream ss;
              ss << buttonOrder.front() << currentButton;
              string s = ss.str();
              u8g2.drawStr(4, 13, "");
            } while (u8g2.nextPage());
            return;
          }
          else if ((digitalRead(buttonLedList[0].button) == LOW) && digitalRead(buttonLedList[3].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            selectedGame = 4;
            return;
          }
        }
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          stringstream ss;
          ss << buttonOrder.front() << currentButton;
          string s = ss.str();
          u8g2.drawStr(4, 13, "to restart");
          u8g2.drawStr(8, 32, "the game");
        } while (u8g2.nextPage());

        x = millis() + 1000;
        while (x > millis())
        {
          if ((digitalRead(buttonLedList[1].button) == LOW) && digitalRead(buttonLedList[2].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            delay(100);
            u8g2.firstPage();
            do
            {
              // Put what you want to draw inside this loop.
              u8g2.setFont(u8g2_font_ncenB14_tr);
              stringstream ss;
              ss << buttonOrder.front() << currentButton;
              string s = ss.str();
              u8g2.drawStr(4, 13, "");
            } while (u8g2.nextPage());
            return;
          }
          else if ((digitalRead(buttonLedList[0].button) == LOW) && digitalRead(buttonLedList[3].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            selectedGame = 4;
            return;
          }
        }
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          stringstream ss;
          ss << buttonOrder.front() << currentButton;
          string s = ss.str();
          u8g2.drawStr(4, 13, "press blue");
          u8g2.drawStr(8, 32, "  and green");
        } while (u8g2.nextPage());

        x = millis() + 1000;
        while (x > millis())
        {
          if ((digitalRead(buttonLedList[1].button) == LOW) && digitalRead(buttonLedList[2].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            delay(100);
            u8g2.firstPage();
            do
            {
              // Put what you want to draw inside this loop.
              u8g2.setFont(u8g2_font_ncenB14_tr);
              stringstream ss;
              ss << buttonOrder.front() << currentButton;
              string s = ss.str();
              u8g2.drawStr(4, 13, "");
            } while (u8g2.nextPage());
            return;
          }
          else if ((digitalRead(buttonLedList[0].button) == LOW) && digitalRead(buttonLedList[3].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            selectedGame = 4;
            return;
          }
        }
        u8g2.firstPage();
        do
        {
          // Put what you want to draw inside this loop.
          u8g2.setFont(u8g2_font_ncenB14_tr);
          stringstream ss;
          ss << buttonOrder.front() << currentButton;
          string s = ss.str();
          u8g2.drawStr(4, 13, "to return");
          u8g2.drawStr(8, 32, "to the menu");
        } while (u8g2.nextPage());

        x = millis() + 1000;
        while (x > millis())
        {
          if ((digitalRead(buttonLedList[1].button) == LOW) && digitalRead(buttonLedList[2].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            delay(100);
            u8g2.firstPage();
            do
            {
              // Put what you want to draw inside this loop.
              u8g2.setFont(u8g2_font_ncenB14_tr);
              stringstream ss;
              ss << buttonOrder.front() << currentButton;
              string s = ss.str();
              u8g2.drawStr(4, 13, "");
            } while (u8g2.nextPage());
            return;
          }
          else if ((digitalRead(buttonLedList[0].button) == LOW) && digitalRead(buttonLedList[3].button) == LOW)
          {
            currentButton = -1;
            currentComplexity = 4;
            buttonOrder = {};
            buttonOrder2 = {};
            selectedGame = 4;
            return;
          }
        }
      }
    }
  }
  int x = millis() + 300;
  while (x > millis())
    ;
  for (int i = 0; i < 4; i++)
  {
    digitalWrite(buttonLedList[i].led, LOW);
  }
  noTone(PIN_BUZZER, 1);
  ++currentComplexity;
  delay(100);
}
void loop()
{
  switch (selectedGame)
  {
  case 0:
    basicSimonSays();
    break;
  case 1:
    ongoingSimonSays();
    break;
  case 2:
    serverLoop();
    break;
  case 3:
    clientLoop();
    break;
  case 4:
    setup();
    break;
  }
}